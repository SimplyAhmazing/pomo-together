#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pomodorojs:server');
var http = require('http');
var ioFactory = require('socket.io');
var pomoTimes = [25, 5, 15];
var clock = require('../modules/clock');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = ioFactory(server);

// Connection on the default name space, aka '/'
io.sockets.on('connection', function(socket){
  console.dir(io.engine);
  // console.log('This connection id is: ', socket.id)
  // console.log('Total cons: ', io.sockets.sockets.length);
    console.log('Total cons: ', io.engine.clientsCount);
    io.sockets.emit('update-total-cons', io.engine.clientsCount);

  socket.on('disconnect', function(){
    console.log('we are disconnecting');
    console.log('Total cons: ', io.engine.clientsCount);
    io.sockets.emit('update-total-cons', io.engine.clientsCount);
  });
});

io.sockets.on('disconnect', function(socket){
  console.log('we have a disconnect');
});



clock.on('tick', function(pomoTime){
  io.sockets.emit('time-tick', pomoTime);
});

/**
 * Listen on provided port, on all network interfaces.
 */

clock.run();
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

